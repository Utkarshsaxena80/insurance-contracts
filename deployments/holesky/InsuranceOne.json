{
  "address": "0x19ed2877F831d49A6D4a4B7a99ce3ab814331049",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_d",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "damageFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ClaimReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsuranceClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "InsuranceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        }
      ],
      "name": "PremiumPaid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "contract InsuranceDAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "damageFactor",
          "type": "uint256"
        }
      ],
      "name": "claimInsurance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentFreq",
          "type": "uint256"
        }
      ],
      "name": "createInsurance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getResultOfRejectedClaims",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "insurances",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentFreq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPremiumPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPaymentPending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timesPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "damageFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimApproved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRejected",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasNFT",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "contract masterContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payPremium",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recieveFund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_insuranceType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToBeSetteled",
          "type": "uint256"
        }
      ],
      "name": "rejectClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "damageFactor",
          "type": "uint256"
        }
      ],
      "name": "setDamageFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timesRemainingToPay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x27d217b3f2e166fb297381165ce541f1d685c87ff082808352b62e854c0eca90",
  "receipt": {
    "to": null,
    "from": "0x712c670352E964c29430e5f6F64bE8A1E73ff4f2",
    "contractAddress": "0x19ed2877F831d49A6D4a4B7a99ce3ab814331049",
    "transactionIndex": 9,
    "gasUsed": "2861130",
    "logsBloom": "0x
    "blockHash": "0x20875d126700d4f5affa0586b01ac03e60d19d27b19d87e6c014ba4dd7340aad",
    "transactionHash": "0x27d217b3f2e166fb297381165ce541f1d685c87ff082808352b62e854c0eca90",
    "logs": [],
    "blockNumber": 3618734,
    "cumulativeGasUsed": "6913373",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "0x1c62B148b3fF74655503568f7321420a12c85772",
    "0x27482e9773c7095b3C2afFc072eEB81080A00510"
  ],
  "numDeployments": 2,
  "solcInputHash": "648d762dac1317b368c5b6b04ba7d3aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_d\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"damageFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ClaimReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"InsuranceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"name\":\"PremiumPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"contract InsuranceDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"damageFactor\",\"type\":\"uint256\"}],\"name\":\"claimInsurance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentFreq\",\"type\":\"uint256\"}],\"name\":\"createInsurance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResultOfRejectedClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"insurances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentFreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPremiumPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaymentPending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"damageFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRejected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasNFT\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"contract masterContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payPremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieveFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBeSetteled\",\"type\":\"uint256\"}],\"name\":\"rejectClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"damageFactor\",\"type\":\"uint256\"}],\"name\":\"setDamageFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timesRemainingToPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/insurance1.sol\":\"InsuranceOne\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./master.sol\\\";\\nimport \\\"./agroCoin.sol\\\";\\n\\ncontract InsuranceDAO is ReentrancyGuard {\\n    address public immutable governanceToken;\\n    address public owner;\\n    uint256 public proposalCount;\\n    uint256 public FEE;\\n\\n    struct Proposal {\\n        address proposer;\\n        uint256 id;\\n        string description;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 insuranceType;\\n        bool executed;\\n        uint256 amountToBeSetteled;\\n\\n    }\\n\\n    address[] DAO_Members;\\n    mapping(address=>bool) isDAOMember;\\n\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n\\n    event ProposalCreated(uint256 id, string description);\\n    event Voted(uint256 proposalId, address voter, bool voteFor, uint256 amount);\\n    event ProposalExecuted(uint256 id, bool passed);\\n    event DAO_Joined(address indexed user);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender==owner, \\\"Only owner can perform this action\\\");\\n        _;\\n    }\\n\\n    masterContract public master;\\n    AgroCoin public token;\\n    uint256[] private proposalLength;\\n\\n    constructor(address _governanceToken,uint256 _fee,address _a) {\\n        \\n        //the token.sol file should be deployed first \\n        governanceToken = _governanceToken;\\n        owner = msg.sender;\\n        FEE=_fee;\\n        master=masterContract(_a);\\n        //token=AgroCoin(_t);\\n    }\\n\\n    function joinDAO() public payable{\\n        require(msg.value>=FEE,\\\"Didnt send enough fee to join DAO\\\");\\n        require(!isDAOMember[msg.sender],\\\"already a DAO member\\\");\\n        DAO_Members.push(msg.sender);\\n        isDAOMember[msg.sender]=true;\\n        emit DAO_Joined(msg.sender);\\n    }\\n\\n    function createProposal(\\n    string memory description,\\n    uint256 _insuranceType,\\n    uint256 _amountToBeSetteled) public  payable{\\n\\n        require(msg.value>=FEE,\\\"Not enough eth\\\");\\n       // require(token.balanceOf(msg.sender)>=100*10**18, \\\"Need at least 100 tokens to create a proposal\\\");\\n        proposalCount++;\\n        proposals[proposalCount] = Proposal({\\n            proposer:msg.sender,\\n            id: proposalCount,\\n            description: description,\\n            votesFor: 0,\\n            votesAgainst: 0,\\n            insuranceType: _insuranceType,\\n            executed: false,\\n            amountToBeSetteled: _amountToBeSetteled\\n        });\\n        proposalLength.push(proposalCount);\\n        emit ProposalCreated(proposalCount, description);\\n    }\\n\\n    function voteOnProposal(uint256 proposalId, bool voteFor, uint256 amount) public nonReentrant {\\n        require(proposals[proposalId].id == proposalId, \\\"Proposal does not exist\\\");\\n        require(!hasVoted[msg.sender][proposalId], \\\"Already voted\\\");  \\n        IERC20 token = IERC20(governanceToken);\\n        require(token.balanceOf(msg.sender)>=amount, \\\"Not enough tokens to vote\\\");\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"Token transfer failed\\\");\\n        if (voteFor) {\\n            proposals[proposalId].votesFor+= amount;\\n        } else {\\n            proposals[proposalId].votesAgainst+= amount;\\n        }\\n        hasVoted[msg.sender][proposalId] = true;\\n        uint256 votesRequiredToPass=4;\\n        emit Voted(proposalId, msg.sender, voteFor, amount);\\n    }\\n\\n    function isPassed( uint256 proposalId) public returns(bool) {\\n     require(proposals[proposalId].id == proposalId, \\\"Proposal does not exist\\\");\\n     uint256 totalVotes = proposals[proposalId].votesFor + proposals[proposalId].votesAgainst;\\n     require(totalVotes>=4, \\\"Not enough votes to process\\\");      \\n     if (proposals[proposalId].votesFor > proposals[proposalId].votesAgainst) {\\n       return true;\\n    } else return false;\\n} \\nfunction processPassedProposals(uint256 proposalId) public {\\n    require(proposals[proposalId].id == proposalId, \\\"Proposal does not exist\\\");\\n    uint256 totalVotes = proposals[proposalId].votesFor + proposals[proposalId].votesAgainst;\\n    require(totalVotes>=4, \\\"Not enough votes to process\\\");\\n    if (proposals[proposalId].votesFor > proposals[proposalId].votesAgainst) {\\n        master.getProposalStateAfterRejection(true, proposals[proposalId].proposer, proposals[proposalId].amountToBeSetteled);\\n    } else {\\n        master.getProposalStateAfterRejection(false, proposals[proposalId].proposer, proposals[proposalId].amountToBeSetteled);\\n    }\\n}\\n\\n   function getAllProposals() public returns (Proposal[] memory ){\\n    \\n        Proposal[] memory allProposals= new Proposal[](proposalLength.length);\\n        for(uint256 i=0;i<proposalLength.length;i++){\\n            allProposals[i]=proposals[proposalLength[i]];\\n        }\\n        return allProposals;\\n     }\\n}\\n\",\"keccak256\":\"0x0fcc9e52ed4ebe949fe3786424f12d5af54125f92d817d03b5c91573783e2919\",\"license\":\"MIT\"},\"contracts/agroCoin.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AgroCoin is ERC20, Ownable {\\n    constructor(uint256 initialSupply) ERC20(\\\"AgroCoin\\\", \\\"$AGRO\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    function mint(address to, uint256 amount) public  {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3fb30f13c1ea4581e0c9e9ab40237c3d086d3e35d97e15a560d8e1eefa0ce689\",\"license\":\"MIT\"},\"contracts/insurance1.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\n    pragma solidity ^0.8.8;\\n\\n    import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n    import \\\"./master.sol\\\";\\n    import \\\"./DAO.sol\\\";\\n    contract InsuranceOne is ReentrancyGuard {\\n    \\n        uint256 public immutable FEE;\\n        address public owner;\\n        uint256 public  totalFund;\\n        struct UserInfo {\\n            address user;\\n            string name;\\n        }\\n        enum claimApproved{\\n            notApproved,\\n            approved,\\n            rejectedAndSentForReview\\n        }\\n\\n        struct InsuranceInfo {\\n            bool isOpen;\\n            uint256 value;\\n            uint256 deadline;\\n            uint256 paymentFreq;\\n            uint256 totalPremiumPaid;\\n            uint256 totalPaymentPending;\\n            uint256 timesPaid;\\n            uint256 damageFactor; \\n            bool claimApproved;\\n            bool isRejected;\\n            bool hasNFT;\\n            uint256 premium;\\n        }\\n\\n\\n        mapping(address => UserInfo) public users;\\n        mapping(address => InsuranceInfo) public insurances;\\n        \\n        event InsuranceCreated(address indexed user, uint256 value, uint256 deadline);\\n        event PremiumPaid(address indexed user, uint256 amount, uint256 totalPaid);\\n        event InsuranceClaimed(address indexed user, uint256 amount);\\n        event ClaimReviewed(address indexed user, uint256 damageFactor, bool approved);\\n\\n        modifier onlyUser() {\\n            require(users[msg.sender].user != address(0), \\\"User not registered\\\");\\n            _;\\n        }\\n        \\n        modifier onlyOwner() {\\n            require(msg.sender == owner, \\\"Only owner can perform this action\\\");\\n            _;\\n        }\\n\\n        \\n\\n        InsuranceDAO public DAO;\\n        masterContract  public master;\\n        constructor(uint256 fee,address _a,address _d) {\\n            FEE = fee;\\n            master=masterContract(_a);\\n            DAO=InsuranceDAO(_d);\\n            owner = msg.sender;\\n        }\\n\\n        function registerUser(string memory name) public {\\n            require(users[msg.sender].user == address(0), \\\"User already registered\\\");\\n            users[msg.sender] = UserInfo(msg.sender, name);\\n        }\\n\\n        function createInsurance(uint256 value, uint256 deadline, uint256 paymentFreq) public payable onlyUser {\\n            require(msg.value >= FEE, \\\"Send enough money to create insurance\\\");\\n            require(!insurances[msg.sender].isOpen, \\\"Insurance already exists\\\");\\n\\n            insurances[msg.sender] = InsuranceInfo({\\n                isOpen: true,\\n                value: value,\\n                deadline: deadline,\\n                paymentFreq: paymentFreq,\\n                totalPremiumPaid: 0,\\n                totalPaymentPending: value,\\n                timesPaid: 0,\\n                damageFactor: 0,\\n                claimApproved: false,\\n                isRejected:false,\\n                hasNFT:false,\\n                premium:2\\n            });\\n            \\n            emit InsuranceCreated(msg.sender, value, deadline);\\n        }\\n\\n        function payPremium() public payable onlyUser {\\n            require(insurances[msg.sender].isOpen, \\\"No active insurance\\\");\\n            require(msg.value >0, \\\"Premium must be greater than 0\\\");\\n            require(insurances[msg.sender].timesPaid<=insurances[msg.sender].paymentFreq);\\n            InsuranceInfo storage insurance = insurances[msg.sender];\\n            insurance.totalPremiumPaid += msg.value;\\n            insurance.totalPaymentPending -= msg.value;\\n            insurance.timesPaid++;\\n\\n            emit PremiumPaid(msg.sender, msg.value, insurance.totalPremiumPaid);\\n        }\\n\\n        function setDamageFactor(address user,uint256 damageFactor) public onlyUser {\\n            require(insurances[user].isOpen, \\\"No active insurance for this user\\\");\\n            require(damageFactor >= 0 && damageFactor <= 100, \\\"Invalid damage factor\\\");\\n\\n            insurances[user].damageFactor = damageFactor;\\n            insurances[user].claimApproved = true;\\n\\n        }\\n\\n        function claimInsurance(uint256 damageFactor) public onlyUser nonReentrant payable  {\\n            uint256 payout;\\n            require(insurances[msg.sender].isOpen,\\\"No active insurance\\\");\\n        // require(!insurances[msg.sender].claimApproved,\\\"Claim  approved\\\");\\n            require(insurances[msg.sender].timesPaid==insurances[msg.sender].paymentFreq,\\\"premium not paid in full\\\");\\n            require(!insurances[msg.sender].isRejected,\\\"user has rejected the claim, proceed to raise a query\\\");\\n            InsuranceInfo storage insurance=insurances[msg.sender];\\n            setDamageFactor(msg.sender,damageFactor);\\n            if (master.NFT_yes_or_noStatus(msg.sender)) {\\n                insurance.hasNFT = true;\\n            }\\n            if(insurance.hasNFT){\\n                payout=(insurance.value*insurance.damageFactor*120)/10000;\\n            }\\n                else{\\n            payout = (insurance.value*insurance.damageFactor)/100;\\n            }\\n            require(payout>0,\\\"cannot process payment \\\");\\n            totalFund-=payout;\\n            insurance.isOpen = false;\\n            insurance.claimApproved=true;\\n            (bool success, ) = payable(msg.sender).call{value: payout}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            emit InsuranceClaimed(msg.sender, payout);\\n        }\\n\\n        function recieveFund() public payable nonReentrant{\\n            require(msg.value>0,\\\"Send some ETH\\\");\\n            totalFund+=msg.value;\\n        }\\n\\n        function premiumRemaining() public view returns (uint256){\\n        InsuranceInfo storage insurance= insurances[msg.sender];\\n        return insurance.timesPaid;\\n        }\\n        function paymentRemaining() public view returns (uint256){\\n        InsuranceInfo storage insurance= insurances[msg.sender];\\n        return insurance.totalPaymentPending;\\n        }\\n        function timesRemainingToPay() public view returns (uint256){\\n        InsuranceInfo storage insurance= insurances[msg.sender];\\n        return insurance.paymentFreq-insurance.timesPaid;\\n        }\\n        function getClaimValue() public view returns(uint256) {\\n        //return claimValue\\n        }\\n        function rejectClaim(  \\n        string memory description,\\n        uint256 _insuranceType,\\n        uint256 _amountToBeSetteled) public payable{\\n            require(insurances[msg.sender].timesPaid==insurances[msg.sender].paymentFreq,\\\"premium not paid in full\\\");\\n            require(!insurances[msg.sender].isRejected,\\\"user has rejected the claim, proceed to raise a query\\\");\\n            insurances[msg.sender].isRejected=false;\\n            //now i have to make a DAO contract which will create greivance and members will vote onn that \\n            //AGRO COIN CAN BE USED FOR DAO VOTING RIGHTS \\n        DAO.createProposal{value: msg.value}(\\n        description,\\n        _insuranceType,\\n        _amountToBeSetteled\\n        );\\n        }\\n        //abhi only proposal create hua hai but we need to execute \\n        //jo result nikla hai \\n        function getResultOfRejectedClaims() public {\\n            uint256 payout;\\n            InsuranceInfo storage insurance=insurances[msg.sender];\\n            if (master.NFT_yes_or_noStatus(msg.sender)) {\\n                insurance.hasNFT = true;\\n                }\\n\\n            if(master.passProposalState(msg.sender)){\\n                //if hasNft\\n                    uint256 claimAfterDaoProposal=master.rejectedValue(msg.sender);\\n                if(insurance.hasNFT){\\n                payout= (claimAfterDaoProposal*insurance.damageFactor*120)/10000;\\n            }\\n                else{\\n                payout= (claimAfterDaoProposal*insurance.damageFactor)/100;\\n            }\\n            }             \\n            else{\\n                if(insurance.hasNFT){\\n                payout = (insurance.value*insurance.damageFactor*120)/10000;\\n                }\\n                else{\\n                payout = (insurance.value*insurance.damageFactor)/100;\\n                }\\n            }\\n        //` require(payout>0,\\\"cannot process payment\\\");\\n            totalFund-=payout;\\n            insurance.isOpen = false;\\n            insurance.claimApproved=true;\\n            (bool success, ) = payable(msg.sender).call{value: payout}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            emit InsuranceClaimed(msg.sender, payout);\\n\\n            }\\n        \\n       \\n        }\\n\\n\\n\",\"keccak256\":\"0x797e476a36e0c33271aaf6735818b4e712ebf1aea62bb9d169d48eec3f8fa9d8\",\"license\":\"MIT\"},\"contracts/master.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.8;\\ncontract masterContract{\\n\\n    mapping(address=>bool) public  NFT_yes_or_no;\\n    mapping (address =>uint) public  userInsurance;//stores userInsurance choice\\n    mapping(address=>uint256)  public NFTDetails;\\n    mapping(address=>bool)  public rejectedClaim;\\n\\n    mapping(address=>uint256) public rejectedValue; \\n    \\n    \\n    function putUserInfo(uint256 choice) public  {\\n     userInsurance[msg.sender]=choice;\\n    }\\n    function getUserInfo() public view returns (uint256){\\n      return userInsurance[msg.sender];\\n    }\\n    function setAddressHasNFT(address user) public {\\n      require(!NFT_yes_or_no[user],\\\"already has nft\\\");\\n        NFT_yes_or_no[user]=true;\\n    }\\n    function NFT_yes_or_noStatus(address user) public view returns (bool) {\\n    return NFT_yes_or_no[user];\\n    }\\n    function getProposalStateAfterRejection(bool _status,address user,uint256 _rejectedValue) public {\\n            //get From DAO.sol\\n         rejectedValue[user]=_rejectedValue;\\n         rejectedClaim[user]=_status;\\n     \\n    }\\n    function passProposalState(address user) public  view returns(bool answer){                    \\n    return rejectedClaim[user];    //to the isnuranceOne.sol\\n    }\\n    function passProposalValue(address user) public view returns(uint256){\\n      return rejectedValue[user];\\n    }\\n\\n}\",\"keccak256\":\"0xa96990fdceab15f929b6dcc3bac392ad9d05ca5b77c86992d42e69d8e4557254\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051613355380380613355833981810160405281019061003291906101a6565b6001600081905550826080818152505081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506101f9565b600080fd5b6000819050919050565b61012581610112565b811461013057600080fd5b50565b6000815190506101428161011c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061017382610148565b9050919050565b61018381610168565b811461018e57600080fd5b50565b6000815190506101a08161017a565b92915050565b6000806000606084860312156101bf576101be61010d565b5b60006101cd86828701610133565b93505060206101de86828701610191565b92505060406101ef86828701610191565b9150509250925092565b60805161313a61021b600039600081816114e201526115d7015261313a6000f3fe6080604052600436106101145760003560e01c8063704f1b94116100a0578063a87430ba11610064578063a87430ba14610327578063c57981b514610365578063ee4494c314610390578063ee97f7f3146103ac578063f85920d8146103d757610114565b8063704f1b9414610252578063841c36141461027b5780638da5cb5b146102a657806393334b7f146102d157806398fabd3a146102fc57610114565b806330b3fc58116100e757806330b3fc58146101bf5780633dc4838a146101d65780633e65fcc41461020157806346314ba21461022c5780635ea611da1461024857610114565b80630ddb34e414610119578063100aca471461014257806327bae60a1461016d57806329c08ba2146101b5575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611f94565b6103f3565b005b34801561014e57600080fd5b5061015761064a565b6040516101649190611fe3565b60405180910390f35b34801561017957600080fd5b50610194600480360381019061018f9190611ffe565b610650565b6040516101ac9c9b9a99989796959493929190612046565b60405180910390f35b6101bd6106e4565b005b3480156101cb57600080fd5b506101d4610a02565b005b3480156101e257600080fd5b506101eb610e73565b6040516101f89190611fe3565b60405180910390f35b34801561020d57600080fd5b50610216610ec2565b6040516102239190611fe3565b60405180910390f35b61024660048036038101906102419190612246565b610f11565b005b610250611159565b005b34801561025e57600080fd5b50610279600480360381019061027491906122b5565b6111c7565b005b34801561028757600080fd5b50610290611365565b60405161029d9190611fe3565b60405180910390f35b3480156102b257600080fd5b506102bb61136a565b6040516102c8919061230d565b60405180910390f35b3480156102dd57600080fd5b506102e6611390565b6040516102f39190611fe3565b60405180910390f35b34801561030857600080fd5b506103116113ee565b60405161031e9190612387565b60405180910390f35b34801561033357600080fd5b5061034e60048036038101906103499190611ffe565b611414565b60405161035c929190612421565b60405180910390f35b34801561037157600080fd5b5061037a6114e0565b6040516103879190611fe3565b60405180910390f35b6103aa60048036038101906103a59190612451565b611504565b005b3480156103b857600080fd5b506103c1611895565b6040516103ce91906124c5565b60405180910390f35b6103f160048036038101906103ec91906124e0565b6118bb565b005b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036104c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bb90612559565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a906125eb565b60405180910390fd5b60008110158015610565575060648111155b6105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b90612657565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff0219169083151502179055505050565b60025481565b60046020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff16908060080160019054906101000a900460ff16908060080160029054906101000a900460ff1690806009015490508c565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac90612559565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083b906126c3565b60405180910390fd5b60003411610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e9061272f565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154111561091857600080fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503481600401600082825461096f919061277e565b925050819055503481600501600082825461098a91906127b2565b925050819055508060060160008154809291906109a6906127e6565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f395bd21029ce552d1941c174d800a5599c4b1b28887cc9b9eea83c5409da93ef3483600401546040516109f792919061282e565b60405180910390a250565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b7b86c5336040518263ffffffff1660e01b8152600401610aa1919061230d565b602060405180830381865afa158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190612883565b15610b055760018160080160026101000a81548160ff0219169083151502179055505b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c874ff46336040518263ffffffff1660e01b8152600401610b60919061230d565b602060405180830381865afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190612883565b15610cb2576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398cc9eba336040518263ffffffff1660e01b8152600401610c03919061230d565b602060405180830381865afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4491906128c5565b90508160080160029054906101000a900460ff1615610c8d576127106078836007015483610c7291906128f2565b610c7c91906128f2565b610c869190612963565b9250610cac565b6064826007015482610c9f91906128f2565b610ca99190612963565b92505b50610d21565b8060080160029054906101000a900460ff1615610cfd57612710607882600701548360010154610ce291906128f2565b610cec91906128f2565b610cf69190612963565b9150610d20565b606481600701548260010154610d1391906128f2565b610d1d9190612963565b91505b5b8160026000828254610d3391906127b2565b9250508190555060008160000160006101000a81548160ff02191690831515021790555060018160080160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1683604051610d9a906129c5565b60006040518083038185875af1925050503d8060008114610dd7576040519150601f19603f3d011682016040523d82523d6000602084013e610ddc565b606091505b5050905080610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790612a26565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a84604051610e669190611fe3565b60405180910390a2505050565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806006015491505090565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806005015491505090565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015414610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90612a92565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160019054906101000a900460ff1615611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e90612b24565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160016101000a81548160ff021916908315150217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166322e2e12d348585856040518563ffffffff1660e01b815260040161112293929190612b44565b6000604051808303818588803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b5050505050505050565b611161611e93565b600034116111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612bce565b60405180910390fd5b34600260008282546111b6919061277e565b925050819055506111c5611ee2565b565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128f90612c3a565b60405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161135e9190612e5c565b5090505050565b600090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806006015481600301546113e891906127b2565b91505090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461145d90612c89565b80601f016020809104026020016040519081016040528092919081815260200182805461148990612c89565b80156114d65780601f106114ab576101008083540402835291602001916114d6565b820191906000526020600020905b8154815290600101906020018083116114b957829003601f168201915b5050505050905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc90612559565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015611638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162f90612fa0565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf9061300c565b60405180910390fd5b6040518061018001604052806001151581526020018481526020018381526020018281526020016000815260200184815260200160008152602001600081526020016000151581526020016000151581526020016000151581526020016002815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055506101408201518160080160026101000a81548160ff02191690831515021790555061016082015181600901559050503373ffffffffffffffffffffffffffffffffffffffff167fc313833ef12e3592b337bf2dafdf346423db10fb975b55aee2a87892a9b20979848460405161188892919061282e565b60405180910390a2505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198390612559565b60405180910390fd5b611994611e93565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c906126c3565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015414611aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae290612a92565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160019054906101000a900460ff1615611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290612b24565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611bc833846103f3565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b7b86c5336040518263ffffffff1660e01b8152600401611c23919061230d565b602060405180830381865afa158015611c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c649190612883565b15611c875760018160080160026101000a81548160ff0219169083151502179055505b8060080160029054906101000a900460ff1615611cd257612710607882600701548360010154611cb791906128f2565b611cc191906128f2565b611ccb9190612963565b9150611cf5565b606481600701548260010154611ce891906128f2565b611cf29190612963565b91505b60008211611d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2f90613078565b60405180910390fd5b8160026000828254611d4a91906127b2565b9250508190555060008160000160006101000a81548160ff02191690831515021790555060018160080160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1683604051611db1906129c5565b60006040518083038185875af1925050503d8060008114611dee576040519150601f19603f3d011682016040523d82523d6000602084013e611df3565b606091505b5050905080611e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2e90612a26565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a84604051611e7d9190611fe3565b60405180910390a2505050611e90611ee2565b50565b600260005403611ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecf906130e4565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2b82611f00565b9050919050565b611f3b81611f20565b8114611f4657600080fd5b50565b600081359050611f5881611f32565b92915050565b6000819050919050565b611f7181611f5e565b8114611f7c57600080fd5b50565b600081359050611f8e81611f68565b92915050565b60008060408385031215611fab57611faa611ef6565b5b6000611fb985828601611f49565b9250506020611fca85828601611f7f565b9150509250929050565b611fdd81611f5e565b82525050565b6000602082019050611ff86000830184611fd4565b92915050565b60006020828403121561201457612013611ef6565b5b600061202284828501611f49565b91505092915050565b60008115159050919050565b6120408161202b565b82525050565b60006101808201905061205c600083018f612037565b612069602083018e611fd4565b612076604083018d611fd4565b612083606083018c611fd4565b612090608083018b611fd4565b61209d60a083018a611fd4565b6120aa60c0830189611fd4565b6120b760e0830188611fd4565b6120c5610100830187612037565b6120d3610120830186612037565b6120e1610140830185612037565b6120ef610160830184611fd4565b9d9c50505050505050505050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121538261210a565b810181811067ffffffffffffffff821117156121725761217161211b565b5b80604052505050565b6000612185611eec565b9050612191828261214a565b919050565b600067ffffffffffffffff8211156121b1576121b061211b565b5b6121ba8261210a565b9050602081019050919050565b82818337600083830152505050565b60006121e96121e484612196565b61217b565b90508281526020810184848401111561220557612204612105565b5b6122108482856121c7565b509392505050565b600082601f83011261222d5761222c612100565b5b813561223d8482602086016121d6565b91505092915050565b60008060006060848603121561225f5761225e611ef6565b5b600084013567ffffffffffffffff81111561227d5761227c611efb565b5b61228986828701612218565b935050602061229a86828701611f7f565b92505060406122ab86828701611f7f565b9150509250925092565b6000602082840312156122cb576122ca611ef6565b5b600082013567ffffffffffffffff8111156122e9576122e8611efb565b5b6122f584828501612218565b91505092915050565b61230781611f20565b82525050565b600060208201905061232260008301846122fe565b92915050565b6000819050919050565b600061234d61234861234384611f00565b612328565b611f00565b9050919050565b600061235f82612332565b9050919050565b600061237182612354565b9050919050565b61238181612366565b82525050565b600060208201905061239c6000830184612378565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123dc5780820151818401526020810190506123c1565b60008484015250505050565b60006123f3826123a2565b6123fd81856123ad565b935061240d8185602086016123be565b6124168161210a565b840191505092915050565b600060408201905061243660008301856122fe565b818103602083015261244881846123e8565b90509392505050565b60008060006060848603121561246a57612469611ef6565b5b600061247886828701611f7f565b935050602061248986828701611f7f565b925050604061249a86828701611f7f565b9150509250925092565b60006124af82612354565b9050919050565b6124bf816124a4565b82525050565b60006020820190506124da60008301846124b6565b92915050565b6000602082840312156124f6576124f5611ef6565b5b600061250484828501611f7f565b91505092915050565b7f55736572206e6f74207265676973746572656400000000000000000000000000600082015250565b60006125436013836123ad565b915061254e8261250d565b602082019050919050565b6000602082019050818103600083015261257281612536565b9050919050565b7f4e6f2061637469766520696e737572616e636520666f7220746869732075736560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125d56021836123ad565b91506125e082612579565b604082019050919050565b60006020820190508181036000830152612604816125c8565b9050919050565b7f496e76616c69642064616d61676520666163746f720000000000000000000000600082015250565b60006126416015836123ad565b915061264c8261260b565b602082019050919050565b6000602082019050818103600083015261267081612634565b9050919050565b7f4e6f2061637469766520696e737572616e636500000000000000000000000000600082015250565b60006126ad6013836123ad565b91506126b882612677565b602082019050919050565b600060208201905081810360008301526126dc816126a0565b9050919050565b7f5072656d69756d206d7573742062652067726561746572207468616e20300000600082015250565b6000612719601e836123ad565b9150612724826126e3565b602082019050919050565b600060208201905081810360008301526127488161270c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278982611f5e565b915061279483611f5e565b92508282019050808211156127ac576127ab61274f565b5b92915050565b60006127bd82611f5e565b91506127c883611f5e565b92508282039050818111156127e0576127df61274f565b5b92915050565b60006127f182611f5e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128235761282261274f565b5b600182019050919050565b60006040820190506128436000830185611fd4565b6128506020830184611fd4565b9392505050565b6128608161202b565b811461286b57600080fd5b50565b60008151905061287d81612857565b92915050565b60006020828403121561289957612898611ef6565b5b60006128a78482850161286e565b91505092915050565b6000815190506128bf81611f68565b92915050565b6000602082840312156128db576128da611ef6565b5b60006128e9848285016128b0565b91505092915050565b60006128fd82611f5e565b915061290883611f5e565b925082820261291681611f5e565b9150828204841483151761292d5761292c61274f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061296e82611f5e565b915061297983611f5e565b92508261298957612988612934565b5b828204905092915050565b600081905092915050565b50565b60006129af600083612994565b91506129ba8261299f565b600082019050919050565b60006129d0826129a2565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612a10600f836123ad565b9150612a1b826129da565b602082019050919050565b60006020820190508181036000830152612a3f81612a03565b9050919050565b7f7072656d69756d206e6f74207061696420696e2066756c6c0000000000000000600082015250565b6000612a7c6018836123ad565b9150612a8782612a46565b602082019050919050565b60006020820190508181036000830152612aab81612a6f565b9050919050565b7f75736572206861732072656a65637465642074686520636c61696d2c2070726f60008201527f6365656420746f20726169736520612071756572790000000000000000000000602082015250565b6000612b0e6035836123ad565b9150612b1982612ab2565b604082019050919050565b60006020820190508181036000830152612b3d81612b01565b9050919050565b60006060820190508181036000830152612b5e81866123e8565b9050612b6d6020830185611fd4565b612b7a6040830184611fd4565b949350505050565b7f53656e6420736f6d652045544800000000000000000000000000000000000000600082015250565b6000612bb8600d836123ad565b9150612bc382612b82565b602082019050919050565b60006020820190508181036000830152612be781612bab565b9050919050565b7f5573657220616c72656164792072656769737465726564000000000000000000600082015250565b6000612c246017836123ad565b9150612c2f82612bee565b602082019050919050565b60006020820190508181036000830152612c5381612c17565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ca157607f821691505b602082108103612cb457612cb3612c5a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d1c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612cdf565b612d268683612cdf565b95508019841693508086168417925050509392505050565b6000612d59612d54612d4f84611f5e565b612328565b611f5e565b9050919050565b6000819050919050565b612d7383612d3e565b612d87612d7f82612d60565b848454612cec565b825550505050565b600090565b612d9c612d8f565b612da7818484612d6a565b505050565b5b81811015612dcb57612dc0600082612d94565b600181019050612dad565b5050565b601f821115612e1057612de181612cba565b612dea84612ccf565b81016020851015612df9578190505b612e0d612e0585612ccf565b830182612dac565b50505b505050565b600082821c905092915050565b6000612e3360001984600802612e15565b1980831691505092915050565b6000612e4c8383612e22565b9150826002028217905092915050565b612e65826123a2565b67ffffffffffffffff811115612e7e57612e7d61211b565b5b612e888254612c89565b612e93828285612dcf565b600060209050601f831160018114612ec65760008415612eb4578287015190505b612ebe8582612e40565b865550612f26565b601f198416612ed486612cba565b60005b82811015612efc57848901518255600182019150602085019450602081019050612ed7565b86831015612f195784890151612f15601f891682612e22565b8355505b6001600288020188555050505b505050505050565b7f53656e6420656e6f756768206d6f6e657920746f2063726561746520696e737560008201527f72616e6365000000000000000000000000000000000000000000000000000000602082015250565b6000612f8a6025836123ad565b9150612f9582612f2e565b604082019050919050565b60006020820190508181036000830152612fb981612f7d565b9050919050565b7f496e737572616e636520616c7265616479206578697374730000000000000000600082015250565b6000612ff66018836123ad565b915061300182612fc0565b602082019050919050565b6000602082019050818103600083015261302581612fe9565b9050919050565b7f63616e6e6f742070726f63657373207061796d656e7420000000000000000000600082015250565b60006130626017836123ad565b915061306d8261302c565b602082019050919050565b6000602082019050818103600083015261309181613055565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006130ce601f836123ad565b91506130d982613098565b602082019050919050565b600060208201905081810360008301526130fd816130c1565b905091905056fea2646970667358221220cc00fe20eddd34296bfa421918c86b5954a05d8359da5eb3e703e34377cacab464736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c8063704f1b94116100a0578063a87430ba11610064578063a87430ba14610327578063c57981b514610365578063ee4494c314610390578063ee97f7f3146103ac578063f85920d8146103d757610114565b8063704f1b9414610252578063841c36141461027b5780638da5cb5b146102a657806393334b7f146102d157806398fabd3a146102fc57610114565b806330b3fc58116100e757806330b3fc58146101bf5780633dc4838a146101d65780633e65fcc41461020157806346314ba21461022c5780635ea611da1461024857610114565b80630ddb34e414610119578063100aca471461014257806327bae60a1461016d57806329c08ba2146101b5575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611f94565b6103f3565b005b34801561014e57600080fd5b5061015761064a565b6040516101649190611fe3565b60405180910390f35b34801561017957600080fd5b50610194600480360381019061018f9190611ffe565b610650565b6040516101ac9c9b9a99989796959493929190612046565b60405180910390f35b6101bd6106e4565b005b3480156101cb57600080fd5b506101d4610a02565b005b3480156101e257600080fd5b506101eb610e73565b6040516101f89190611fe3565b60405180910390f35b34801561020d57600080fd5b50610216610ec2565b6040516102239190611fe3565b60405180910390f35b61024660048036038101906102419190612246565b610f11565b005b610250611159565b005b34801561025e57600080fd5b50610279600480360381019061027491906122b5565b6111c7565b005b34801561028757600080fd5b50610290611365565b60405161029d9190611fe3565b60405180910390f35b3480156102b257600080fd5b506102bb61136a565b6040516102c8919061230d565b60405180910390f35b3480156102dd57600080fd5b506102e6611390565b6040516102f39190611fe3565b60405180910390f35b34801561030857600080fd5b506103116113ee565b60405161031e9190612387565b60405180910390f35b34801561033357600080fd5b5061034e60048036038101906103499190611ffe565b611414565b60405161035c929190612421565b60405180910390f35b34801561037157600080fd5b5061037a6114e0565b6040516103879190611fe3565b60405180910390f35b6103aa60048036038101906103a59190612451565b611504565b005b3480156103b857600080fd5b506103c1611895565b6040516103ce91906124c5565b60405180910390f35b6103f160048036038101906103ec91906124e0565b6118bb565b005b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036104c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bb90612559565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a906125eb565b60405180910390fd5b60008110158015610565575060648111155b6105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b90612657565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff0219169083151502179055505050565b60025481565b60046020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff16908060080160019054906101000a900460ff16908060080160029054906101000a900460ff1690806009015490508c565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac90612559565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083b906126c3565b60405180910390fd5b60003411610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e9061272f565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154111561091857600080fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503481600401600082825461096f919061277e565b925050819055503481600501600082825461098a91906127b2565b925050819055508060060160008154809291906109a6906127e6565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f395bd21029ce552d1941c174d800a5599c4b1b28887cc9b9eea83c5409da93ef3483600401546040516109f792919061282e565b60405180910390a250565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b7b86c5336040518263ffffffff1660e01b8152600401610aa1919061230d565b602060405180830381865afa158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190612883565b15610b055760018160080160026101000a81548160ff0219169083151502179055505b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c874ff46336040518263ffffffff1660e01b8152600401610b60919061230d565b602060405180830381865afa158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190612883565b15610cb2576000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398cc9eba336040518263ffffffff1660e01b8152600401610c03919061230d565b602060405180830381865afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4491906128c5565b90508160080160029054906101000a900460ff1615610c8d576127106078836007015483610c7291906128f2565b610c7c91906128f2565b610c869190612963565b9250610cac565b6064826007015482610c9f91906128f2565b610ca99190612963565b92505b50610d21565b8060080160029054906101000a900460ff1615610cfd57612710607882600701548360010154610ce291906128f2565b610cec91906128f2565b610cf69190612963565b9150610d20565b606481600701548260010154610d1391906128f2565b610d1d9190612963565b91505b5b8160026000828254610d3391906127b2565b9250508190555060008160000160006101000a81548160ff02191690831515021790555060018160080160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1683604051610d9a906129c5565b60006040518083038185875af1925050503d8060008114610dd7576040519150601f19603f3d011682016040523d82523d6000602084013e610ddc565b606091505b5050905080610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790612a26565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a84604051610e669190611fe3565b60405180910390a2505050565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806006015491505090565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806005015491505090565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015414610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90612a92565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160019054906101000a900460ff1615611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e90612b24565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160016101000a81548160ff021916908315150217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166322e2e12d348585856040518563ffffffff1660e01b815260040161112293929190612b44565b6000604051808303818588803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b5050505050505050565b611161611e93565b600034116111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612bce565b60405180910390fd5b34600260008282546111b6919061277e565b925050819055506111c5611ee2565b565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128f90612c3a565b60405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161135e9190612e5c565b5090505050565b600090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806006015481600301546113e891906127b2565b91505090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461145d90612c89565b80601f016020809104026020016040519081016040528092919081815260200182805461148990612c89565b80156114d65780601f106114ab576101008083540402835291602001916114d6565b820191906000526020600020905b8154815290600101906020018083116114b957829003601f168201915b5050505050905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc90612559565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015611638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162f90612fa0565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf9061300c565b60405180910390fd5b6040518061018001604052806001151581526020018481526020018381526020018281526020016000815260200184815260200160008152602001600081526020016000151581526020016000151581526020016000151581526020016002815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055506101408201518160080160026101000a81548160ff02191690831515021790555061016082015181600901559050503373ffffffffffffffffffffffffffffffffffffffff167fc313833ef12e3592b337bf2dafdf346423db10fb975b55aee2a87892a9b20979848460405161188892919061282e565b60405180910390a2505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198390612559565b60405180910390fd5b611994611e93565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c906126c3565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015414611aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae290612a92565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160019054906101000a900460ff1615611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290612b24565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611bc833846103f3565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b7b86c5336040518263ffffffff1660e01b8152600401611c23919061230d565b602060405180830381865afa158015611c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c649190612883565b15611c875760018160080160026101000a81548160ff0219169083151502179055505b8060080160029054906101000a900460ff1615611cd257612710607882600701548360010154611cb791906128f2565b611cc191906128f2565b611ccb9190612963565b9150611cf5565b606481600701548260010154611ce891906128f2565b611cf29190612963565b91505b60008211611d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2f90613078565b60405180910390fd5b8160026000828254611d4a91906127b2565b9250508190555060008160000160006101000a81548160ff02191690831515021790555060018160080160006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff1683604051611db1906129c5565b60006040518083038185875af1925050503d8060008114611dee576040519150601f19603f3d011682016040523d82523d6000602084013e611df3565b606091505b5050905080611e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2e90612a26565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a84604051611e7d9190611fe3565b60405180910390a2505050611e90611ee2565b50565b600260005403611ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecf906130e4565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2b82611f00565b9050919050565b611f3b81611f20565b8114611f4657600080fd5b50565b600081359050611f5881611f32565b92915050565b6000819050919050565b611f7181611f5e565b8114611f7c57600080fd5b50565b600081359050611f8e81611f68565b92915050565b60008060408385031215611fab57611faa611ef6565b5b6000611fb985828601611f49565b9250506020611fca85828601611f7f565b9150509250929050565b611fdd81611f5e565b82525050565b6000602082019050611ff86000830184611fd4565b92915050565b60006020828403121561201457612013611ef6565b5b600061202284828501611f49565b91505092915050565b60008115159050919050565b6120408161202b565b82525050565b60006101808201905061205c600083018f612037565b612069602083018e611fd4565b612076604083018d611fd4565b612083606083018c611fd4565b612090608083018b611fd4565b61209d60a083018a611fd4565b6120aa60c0830189611fd4565b6120b760e0830188611fd4565b6120c5610100830187612037565b6120d3610120830186612037565b6120e1610140830185612037565b6120ef610160830184611fd4565b9d9c50505050505050505050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121538261210a565b810181811067ffffffffffffffff821117156121725761217161211b565b5b80604052505050565b6000612185611eec565b9050612191828261214a565b919050565b600067ffffffffffffffff8211156121b1576121b061211b565b5b6121ba8261210a565b9050602081019050919050565b82818337600083830152505050565b60006121e96121e484612196565b61217b565b90508281526020810184848401111561220557612204612105565b5b6122108482856121c7565b509392505050565b600082601f83011261222d5761222c612100565b5b813561223d8482602086016121d6565b91505092915050565b60008060006060848603121561225f5761225e611ef6565b5b600084013567ffffffffffffffff81111561227d5761227c611efb565b5b61228986828701612218565b935050602061229a86828701611f7f565b92505060406122ab86828701611f7f565b9150509250925092565b6000602082840312156122cb576122ca611ef6565b5b600082013567ffffffffffffffff8111156122e9576122e8611efb565b5b6122f584828501612218565b91505092915050565b61230781611f20565b82525050565b600060208201905061232260008301846122fe565b92915050565b6000819050919050565b600061234d61234861234384611f00565b612328565b611f00565b9050919050565b600061235f82612332565b9050919050565b600061237182612354565b9050919050565b61238181612366565b82525050565b600060208201905061239c6000830184612378565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123dc5780820151818401526020810190506123c1565b60008484015250505050565b60006123f3826123a2565b6123fd81856123ad565b935061240d8185602086016123be565b6124168161210a565b840191505092915050565b600060408201905061243660008301856122fe565b818103602083015261244881846123e8565b90509392505050565b60008060006060848603121561246a57612469611ef6565b5b600061247886828701611f7f565b935050602061248986828701611f7f565b925050604061249a86828701611f7f565b9150509250925092565b60006124af82612354565b9050919050565b6124bf816124a4565b82525050565b60006020820190506124da60008301846124b6565b92915050565b6000602082840312156124f6576124f5611ef6565b5b600061250484828501611f7f565b91505092915050565b7f55736572206e6f74207265676973746572656400000000000000000000000000600082015250565b60006125436013836123ad565b915061254e8261250d565b602082019050919050565b6000602082019050818103600083015261257281612536565b9050919050565b7f4e6f2061637469766520696e737572616e636520666f7220746869732075736560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125d56021836123ad565b91506125e082612579565b604082019050919050565b60006020820190508181036000830152612604816125c8565b9050919050565b7f496e76616c69642064616d61676520666163746f720000000000000000000000600082015250565b60006126416015836123ad565b915061264c8261260b565b602082019050919050565b6000602082019050818103600083015261267081612634565b9050919050565b7f4e6f2061637469766520696e737572616e636500000000000000000000000000600082015250565b60006126ad6013836123ad565b91506126b882612677565b602082019050919050565b600060208201905081810360008301526126dc816126a0565b9050919050565b7f5072656d69756d206d7573742062652067726561746572207468616e20300000600082015250565b6000612719601e836123ad565b9150612724826126e3565b602082019050919050565b600060208201905081810360008301526127488161270c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278982611f5e565b915061279483611f5e565b92508282019050808211156127ac576127ab61274f565b5b92915050565b60006127bd82611f5e565b91506127c883611f5e565b92508282039050818111156127e0576127df61274f565b5b92915050565b60006127f182611f5e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128235761282261274f565b5b600182019050919050565b60006040820190506128436000830185611fd4565b6128506020830184611fd4565b9392505050565b6128608161202b565b811461286b57600080fd5b50565b60008151905061287d81612857565b92915050565b60006020828403121561289957612898611ef6565b5b60006128a78482850161286e565b91505092915050565b6000815190506128bf81611f68565b92915050565b6000602082840312156128db576128da611ef6565b5b60006128e9848285016128b0565b91505092915050565b60006128fd82611f5e565b915061290883611f5e565b925082820261291681611f5e565b9150828204841483151761292d5761292c61274f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061296e82611f5e565b915061297983611f5e565b92508261298957612988612934565b5b828204905092915050565b600081905092915050565b50565b60006129af600083612994565b91506129ba8261299f565b600082019050919050565b60006129d0826129a2565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612a10600f836123ad565b9150612a1b826129da565b602082019050919050565b60006020820190508181036000830152612a3f81612a03565b9050919050565b7f7072656d69756d206e6f74207061696420696e2066756c6c0000000000000000600082015250565b6000612a7c6018836123ad565b9150612a8782612a46565b602082019050919050565b60006020820190508181036000830152612aab81612a6f565b9050919050565b7f75736572206861732072656a65637465642074686520636c61696d2c2070726f60008201527f6365656420746f20726169736520612071756572790000000000000000000000602082015250565b6000612b0e6035836123ad565b9150612b1982612ab2565b604082019050919050565b60006020820190508181036000830152612b3d81612b01565b9050919050565b60006060820190508181036000830152612b5e81866123e8565b9050612b6d6020830185611fd4565b612b7a6040830184611fd4565b949350505050565b7f53656e6420736f6d652045544800000000000000000000000000000000000000600082015250565b6000612bb8600d836123ad565b9150612bc382612b82565b602082019050919050565b60006020820190508181036000830152612be781612bab565b9050919050565b7f5573657220616c72656164792072656769737465726564000000000000000000600082015250565b6000612c246017836123ad565b9150612c2f82612bee565b602082019050919050565b60006020820190508181036000830152612c5381612c17565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ca157607f821691505b602082108103612cb457612cb3612c5a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d1c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612cdf565b612d268683612cdf565b95508019841693508086168417925050509392505050565b6000612d59612d54612d4f84611f5e565b612328565b611f5e565b9050919050565b6000819050919050565b612d7383612d3e565b612d87612d7f82612d60565b848454612cec565b825550505050565b600090565b612d9c612d8f565b612da7818484612d6a565b505050565b5b81811015612dcb57612dc0600082612d94565b600181019050612dad565b5050565b601f821115612e1057612de181612cba565b612dea84612ccf565b81016020851015612df9578190505b612e0d612e0585612ccf565b830182612dac565b50505b505050565b600082821c905092915050565b6000612e3360001984600802612e15565b1980831691505092915050565b6000612e4c8383612e22565b9150826002028217905092915050565b612e65826123a2565b67ffffffffffffffff811115612e7e57612e7d61211b565b5b612e888254612c89565b612e93828285612dcf565b600060209050601f831160018114612ec65760008415612eb4578287015190505b612ebe8582612e40565b865550612f26565b601f198416612ed486612cba565b60005b82811015612efc57848901518255600182019150602085019450602081019050612ed7565b86831015612f195784890151612f15601f891682612e22565b8355505b6001600288020188555050505b505050505050565b7f53656e6420656e6f756768206d6f6e657920746f2063726561746520696e737560008201527f72616e6365000000000000000000000000000000000000000000000000000000602082015250565b6000612f8a6025836123ad565b9150612f9582612f2e565b604082019050919050565b60006020820190508181036000830152612fb981612f7d565b9050919050565b7f496e737572616e636520616c7265616479206578697374730000000000000000600082015250565b6000612ff66018836123ad565b915061300182612fc0565b602082019050919050565b6000602082019050818103600083015261302581612fe9565b9050919050565b7f63616e6e6f742070726f63657373207061796d656e7420000000000000000000600082015250565b60006130626017836123ad565b915061306d8261302c565b602082019050919050565b6000602082019050818103600083015261309181613055565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006130ce601f836123ad565b91506130d982613098565b602082019050919050565b600060208201905081810360008301526130fd816130c1565b905091905056fea2646970667358221220cc00fe20eddd34296bfa421918c86b5954a05d8359da5eb3e703e34377cacab464736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1433,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1435,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "totalFund",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1474,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "users",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)1440_storage)"
      },
      {
        "astId": 1479,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "insurances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(InsuranceInfo)1469_storage)"
      },
      {
        "astId": 1542,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "DAO",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(InsuranceDAO)1382"
      },
      {
        "astId": 1545,
        "contract": "contracts/insurance1.sol:InsuranceOne",
        "label": "master",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(masterContract)2329"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(InsuranceDAO)1382": {
        "encoding": "inplace",
        "label": "contract InsuranceDAO",
        "numberOfBytes": "20"
      },
      "t_contract(masterContract)2329": {
        "encoding": "inplace",
        "label": "contract masterContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(InsuranceInfo)1469_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct InsuranceOne.InsuranceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(InsuranceInfo)1469_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)1440_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct InsuranceOne.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1440_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InsuranceInfo)1469_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceOne.InsuranceInfo",
        "members": [
          {
            "astId": 1446,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "isOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1448,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1450,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "deadline",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1452,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "paymentFreq",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1454,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "totalPremiumPaid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1456,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "totalPaymentPending",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1458,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "timesPaid",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1460,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "damageFactor",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1462,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "claimApproved",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 1464,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "isRejected",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 1466,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "hasNFT",
            "offset": 2,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 1468,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "premium",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(UserInfo)1440_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceOne.UserInfo",
        "members": [
          {
            "astId": 1437,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1439,
            "contract": "contracts/insurance1.sol:InsuranceOne",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}