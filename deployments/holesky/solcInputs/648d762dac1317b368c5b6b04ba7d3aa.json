{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/agroCoin.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AgroCoin is ERC20, Ownable {\n    constructor(uint256 initialSupply) ERC20(\"AgroCoin\", \"$AGRO\") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    function mint(address to, uint256 amount) public  {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./master.sol\";\nimport \"./agroCoin.sol\";\n\ncontract InsuranceDAO is ReentrancyGuard {\n    address public immutable governanceToken;\n    address public owner;\n    uint256 public proposalCount;\n    uint256 public FEE;\n\n    struct Proposal {\n        address proposer;\n        uint256 id;\n        string description;\n        uint256 votesFor;\n        uint256 votesAgainst;\n        uint256 insuranceType;\n        bool executed;\n        uint256 amountToBeSetteled;\n\n    }\n\n    address[] DAO_Members;\n    mapping(address=>bool) isDAOMember;\n\n    mapping(uint256 => Proposal) public proposals;\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\n\n    event ProposalCreated(uint256 id, string description);\n    event Voted(uint256 proposalId, address voter, bool voteFor, uint256 amount);\n    event ProposalExecuted(uint256 id, bool passed);\n    event DAO_Joined(address indexed user);\n\n    modifier onlyOwner() {\n        require(msg.sender==owner, \"Only owner can perform this action\");\n        _;\n    }\n\n    masterContract public master;\n    AgroCoin public token;\n    uint256[] private proposalLength;\n\n    constructor(address _governanceToken,uint256 _fee,address _a) {\n        \n        //the token.sol file should be deployed first \n        governanceToken = _governanceToken;\n        owner = msg.sender;\n        FEE=_fee;\n        master=masterContract(_a);\n        //token=AgroCoin(_t);\n    }\n\n    function joinDAO() public payable{\n        require(msg.value>=FEE,\"Didnt send enough fee to join DAO\");\n        require(!isDAOMember[msg.sender],\"already a DAO member\");\n        DAO_Members.push(msg.sender);\n        isDAOMember[msg.sender]=true;\n        emit DAO_Joined(msg.sender);\n    }\n\n    function createProposal(\n    string memory description,\n    uint256 _insuranceType,\n    uint256 _amountToBeSetteled) public  payable{\n\n        require(msg.value>=FEE,\"Not enough eth\");\n       // require(token.balanceOf(msg.sender)>=100*10**18, \"Need at least 100 tokens to create a proposal\");\n        proposalCount++;\n        proposals[proposalCount] = Proposal({\n            proposer:msg.sender,\n            id: proposalCount,\n            description: description,\n            votesFor: 0,\n            votesAgainst: 0,\n            insuranceType: _insuranceType,\n            executed: false,\n            amountToBeSetteled: _amountToBeSetteled\n        });\n        proposalLength.push(proposalCount);\n        emit ProposalCreated(proposalCount, description);\n    }\n\n    function voteOnProposal(uint256 proposalId, bool voteFor, uint256 amount) public nonReentrant {\n        require(proposals[proposalId].id == proposalId, \"Proposal does not exist\");\n        require(!hasVoted[msg.sender][proposalId], \"Already voted\");  \n        IERC20 token = IERC20(governanceToken);\n        require(token.balanceOf(msg.sender)>=amount, \"Not enough tokens to vote\");\n        require(token.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\n        if (voteFor) {\n            proposals[proposalId].votesFor+= amount;\n        } else {\n            proposals[proposalId].votesAgainst+= amount;\n        }\n        hasVoted[msg.sender][proposalId] = true;\n        uint256 votesRequiredToPass=4;\n        emit Voted(proposalId, msg.sender, voteFor, amount);\n    }\n\n    function isPassed( uint256 proposalId) public returns(bool) {\n     require(proposals[proposalId].id == proposalId, \"Proposal does not exist\");\n     uint256 totalVotes = proposals[proposalId].votesFor + proposals[proposalId].votesAgainst;\n     require(totalVotes>=4, \"Not enough votes to process\");      \n     if (proposals[proposalId].votesFor > proposals[proposalId].votesAgainst) {\n       return true;\n    } else return false;\n} \nfunction processPassedProposals(uint256 proposalId) public {\n    require(proposals[proposalId].id == proposalId, \"Proposal does not exist\");\n    uint256 totalVotes = proposals[proposalId].votesFor + proposals[proposalId].votesAgainst;\n    require(totalVotes>=4, \"Not enough votes to process\");\n    if (proposals[proposalId].votesFor > proposals[proposalId].votesAgainst) {\n        master.getProposalStateAfterRejection(true, proposals[proposalId].proposer, proposals[proposalId].amountToBeSetteled);\n    } else {\n        master.getProposalStateAfterRejection(false, proposals[proposalId].proposer, proposals[proposalId].amountToBeSetteled);\n    }\n}\n\n   function getAllProposals() public returns (Proposal[] memory ){\n    \n        Proposal[] memory allProposals= new Proposal[](proposalLength.length);\n        for(uint256 i=0;i<proposalLength.length;i++){\n            allProposals[i]=proposals[proposalLength[i]];\n        }\n        return allProposals;\n     }\n}\n"
    },
    "contracts/insurance1.sol": {
      "content": "    // SPDX-License-Identifier: MIT\n    pragma solidity ^0.8.8;\n\n    import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n    import \"./master.sol\";\n    import \"./DAO.sol\";\n    contract InsuranceOne is ReentrancyGuard {\n    \n        uint256 public immutable FEE;\n        address public owner;\n        uint256 public  totalFund;\n        struct UserInfo {\n            address user;\n            string name;\n        }\n        enum claimApproved{\n            notApproved,\n            approved,\n            rejectedAndSentForReview\n        }\n\n        struct InsuranceInfo {\n            bool isOpen;\n            uint256 value;\n            uint256 deadline;\n            uint256 paymentFreq;\n            uint256 totalPremiumPaid;\n            uint256 totalPaymentPending;\n            uint256 timesPaid;\n            uint256 damageFactor; \n            bool claimApproved;\n            bool isRejected;\n            bool hasNFT;\n            uint256 premium;\n        }\n\n\n        mapping(address => UserInfo) public users;\n        mapping(address => InsuranceInfo) public insurances;\n        \n        event InsuranceCreated(address indexed user, uint256 value, uint256 deadline);\n        event PremiumPaid(address indexed user, uint256 amount, uint256 totalPaid);\n        event InsuranceClaimed(address indexed user, uint256 amount);\n        event ClaimReviewed(address indexed user, uint256 damageFactor, bool approved);\n\n        modifier onlyUser() {\n            require(users[msg.sender].user != address(0), \"User not registered\");\n            _;\n        }\n        \n        modifier onlyOwner() {\n            require(msg.sender == owner, \"Only owner can perform this action\");\n            _;\n        }\n\n        \n\n        InsuranceDAO public DAO;\n        masterContract  public master;\n        constructor(uint256 fee,address _a,address _d) {\n            FEE = fee;\n            master=masterContract(_a);\n            DAO=InsuranceDAO(_d);\n            owner = msg.sender;\n        }\n\n        function registerUser(string memory name) public {\n            require(users[msg.sender].user == address(0), \"User already registered\");\n            users[msg.sender] = UserInfo(msg.sender, name);\n        }\n\n        function createInsurance(uint256 value, uint256 deadline, uint256 paymentFreq) public payable onlyUser {\n            require(msg.value >= FEE, \"Send enough money to create insurance\");\n            require(!insurances[msg.sender].isOpen, \"Insurance already exists\");\n\n            insurances[msg.sender] = InsuranceInfo({\n                isOpen: true,\n                value: value,\n                deadline: deadline,\n                paymentFreq: paymentFreq,\n                totalPremiumPaid: 0,\n                totalPaymentPending: value,\n                timesPaid: 0,\n                damageFactor: 0,\n                claimApproved: false,\n                isRejected:false,\n                hasNFT:false,\n                premium:2\n            });\n            \n            emit InsuranceCreated(msg.sender, value, deadline);\n        }\n\n        function payPremium() public payable onlyUser {\n            require(insurances[msg.sender].isOpen, \"No active insurance\");\n            require(msg.value >0, \"Premium must be greater than 0\");\n            require(insurances[msg.sender].timesPaid<=insurances[msg.sender].paymentFreq);\n            InsuranceInfo storage insurance = insurances[msg.sender];\n            insurance.totalPremiumPaid += msg.value;\n            insurance.totalPaymentPending -= msg.value;\n            insurance.timesPaid++;\n\n            emit PremiumPaid(msg.sender, msg.value, insurance.totalPremiumPaid);\n        }\n\n        function setDamageFactor(address user,uint256 damageFactor) public onlyUser {\n            require(insurances[user].isOpen, \"No active insurance for this user\");\n            require(damageFactor >= 0 && damageFactor <= 100, \"Invalid damage factor\");\n\n            insurances[user].damageFactor = damageFactor;\n            insurances[user].claimApproved = true;\n\n        }\n\n        function claimInsurance(uint256 damageFactor) public onlyUser nonReentrant payable  {\n            uint256 payout;\n            require(insurances[msg.sender].isOpen,\"No active insurance\");\n        // require(!insurances[msg.sender].claimApproved,\"Claim  approved\");\n            require(insurances[msg.sender].timesPaid==insurances[msg.sender].paymentFreq,\"premium not paid in full\");\n            require(!insurances[msg.sender].isRejected,\"user has rejected the claim, proceed to raise a query\");\n            InsuranceInfo storage insurance=insurances[msg.sender];\n            setDamageFactor(msg.sender,damageFactor);\n            if (master.NFT_yes_or_noStatus(msg.sender)) {\n                insurance.hasNFT = true;\n            }\n            if(insurance.hasNFT){\n                payout=(insurance.value*insurance.damageFactor*120)/10000;\n            }\n                else{\n            payout = (insurance.value*insurance.damageFactor)/100;\n            }\n            require(payout>0,\"cannot process payment \");\n            totalFund-=payout;\n            insurance.isOpen = false;\n            insurance.claimApproved=true;\n            (bool success, ) = payable(msg.sender).call{value: payout}(\"\");\n            require(success, \"Transfer failed\");\n            emit InsuranceClaimed(msg.sender, payout);\n        }\n\n        function recieveFund() public payable nonReentrant{\n            require(msg.value>0,\"Send some ETH\");\n            totalFund+=msg.value;\n        }\n\n        function premiumRemaining() public view returns (uint256){\n        InsuranceInfo storage insurance= insurances[msg.sender];\n        return insurance.timesPaid;\n        }\n        function paymentRemaining() public view returns (uint256){\n        InsuranceInfo storage insurance= insurances[msg.sender];\n        return insurance.totalPaymentPending;\n        }\n        function timesRemainingToPay() public view returns (uint256){\n        InsuranceInfo storage insurance= insurances[msg.sender];\n        return insurance.paymentFreq-insurance.timesPaid;\n        }\n        function getClaimValue() public view returns(uint256) {\n        //return claimValue\n        }\n        function rejectClaim(  \n        string memory description,\n        uint256 _insuranceType,\n        uint256 _amountToBeSetteled) public payable{\n            require(insurances[msg.sender].timesPaid==insurances[msg.sender].paymentFreq,\"premium not paid in full\");\n            require(!insurances[msg.sender].isRejected,\"user has rejected the claim, proceed to raise a query\");\n            insurances[msg.sender].isRejected=false;\n            //now i have to make a DAO contract which will create greivance and members will vote onn that \n            //AGRO COIN CAN BE USED FOR DAO VOTING RIGHTS \n        DAO.createProposal{value: msg.value}(\n        description,\n        _insuranceType,\n        _amountToBeSetteled\n        );\n        }\n        //abhi only proposal create hua hai but we need to execute \n        //jo result nikla hai \n        function getResultOfRejectedClaims() public {\n            uint256 payout;\n            InsuranceInfo storage insurance=insurances[msg.sender];\n            if (master.NFT_yes_or_noStatus(msg.sender)) {\n                insurance.hasNFT = true;\n                }\n\n            if(master.passProposalState(msg.sender)){\n                //if hasNft\n                    uint256 claimAfterDaoProposal=master.rejectedValue(msg.sender);\n                if(insurance.hasNFT){\n                payout= (claimAfterDaoProposal*insurance.damageFactor*120)/10000;\n            }\n                else{\n                payout= (claimAfterDaoProposal*insurance.damageFactor)/100;\n            }\n            }             \n            else{\n                if(insurance.hasNFT){\n                payout = (insurance.value*insurance.damageFactor*120)/10000;\n                }\n                else{\n                payout = (insurance.value*insurance.damageFactor)/100;\n                }\n            }\n        //` require(payout>0,\"cannot process payment\");\n            totalFund-=payout;\n            insurance.isOpen = false;\n            insurance.claimApproved=true;\n            (bool success, ) = payable(msg.sender).call{value: payout}(\"\");\n            require(success, \"Transfer failed\");\n            emit InsuranceClaimed(msg.sender, payout);\n\n            }\n        \n       \n        }\n\n\n"
    },
    "contracts/master.sol": {
      "content": "//SPDX-License-Identifier:MIT\npragma solidity ^0.8.8;\ncontract masterContract{\n\n    mapping(address=>bool) public  NFT_yes_or_no;\n    mapping (address =>uint) public  userInsurance;//stores userInsurance choice\n    mapping(address=>uint256)  public NFTDetails;\n    mapping(address=>bool)  public rejectedClaim;\n\n    mapping(address=>uint256) public rejectedValue; \n    \n    \n    function putUserInfo(uint256 choice) public  {\n     userInsurance[msg.sender]=choice;\n    }\n    function getUserInfo() public view returns (uint256){\n      return userInsurance[msg.sender];\n    }\n    function setAddressHasNFT(address user) public {\n      require(!NFT_yes_or_no[user],\"already has nft\");\n        NFT_yes_or_no[user]=true;\n    }\n    function NFT_yes_or_noStatus(address user) public view returns (bool) {\n    return NFT_yes_or_no[user];\n    }\n    function getProposalStateAfterRejection(bool _status,address user,uint256 _rejectedValue) public {\n            //get From DAO.sol\n         rejectedValue[user]=_rejectedValue;\n         rejectedClaim[user]=_status;\n     \n    }\n    function passProposalState(address user) public  view returns(bool answer){                    \n    return rejectedClaim[user];    //to the isnuranceOne.sol\n    }\n    function passProposalValue(address user) public view returns(uint256){\n      return rejectedValue[user];\n    }\n\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}