{
  "address": "0xc43a44eec2ABCeb03f59a2f6E78156165A1C6E99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "DAO_Joined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "passed",
          "type": "bool"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "voteFor",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_insuranceType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToBeSetteled",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinDAO",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "contract masterContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "processPassedProposals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "insuranceType",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountToBeSetteled",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract AgroCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voteFor",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x826f51814fed6bede051255c59d5581658912869b09df5e6c013611a71ea03f5",
  "receipt": {
    "to": null,
    "from": "0x712c670352E964c29430e5f6F64bE8A1E73ff4f2",
    "contractAddress": "0xc43a44eec2ABCeb03f59a2f6E78156165A1C6E99",
    "transactionIndex": 12,
    "gasUsed": "1784318",
    "logsBloom": "0x
    "blockHash": "0xfe4479952580be985d7b1a90f77299b51e9a7eb475500dc59afeb326b7c6012a",
    "transactionHash": "0x826f51814fed6bede051255c59d5581658912869b09df5e6c013611a71ea03f5",
    "logs": [],
    "blockNumber": 3615278,
    "cumulativeGasUsed": "23915158",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa062e4bc4039b697897211D43e90fA548b269D48",
    "500000000000000000",
    "0x58d83F0973F8538d64F262C4F8E1C91f403650Dc"
  ],
  "numDeployments": 1,
  "solcInputHash": "e3cb9f5f439e59127a1cdd6ba662d211",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DAO_Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToBeSetteled\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinDAO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"contract masterContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"processPassedProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountToBeSetteled\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract AgroCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"InsuranceDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./master.sol\\\";\\nimport \\\"./agroCoin.sol\\\";\\n\\ncontract InsuranceDAO is ReentrancyGuard {\\n    address public immutable governanceToken;\\n    address public owner;\\n    uint256 public proposalCount;\\n    uint256 public FEE;\\n\\n    struct Proposal {\\n        address proposer;\\n        uint256 id;\\n        string description;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 insuranceType;\\n        bool executed;\\n        uint256 amountToBeSetteled;\\n\\n    }\\n\\n    address[] DAO_Members;\\n    mapping(address=>bool) isDAOMember;\\n\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n\\n    event ProposalCreated(uint256 id, string description);\\n    event Voted(uint256 proposalId, address voter, bool voteFor, uint256 amount);\\n    event ProposalExecuted(uint256 id, bool passed);\\n    event DAO_Joined(address indexed user);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender==owner, \\\"Only owner can perform this action\\\");\\n        _;\\n    }\\n\\n    masterContract public master;\\n    AgroCoin public token;\\n\\n    constructor(address _governanceToken,uint256 _fee,address _a) {\\n        \\n        //the token.sol file should be deployed first \\n        governanceToken = _governanceToken;\\n        owner = msg.sender;\\n        FEE=_fee;\\n        master=masterContract(_a);\\n        //token=AgroCoin(_t);\\n    }\\n\\n    function joinDAO() public payable{\\n        require(msg.value>=FEE,\\\"Didnt send enough fee to join DAO\\\");\\n        require(!isDAOMember[msg.sender],\\\"already a DAO member\\\");\\n        DAO_Members.push(msg.sender);\\n        isDAOMember[msg.sender]=true;\\n        emit DAO_Joined(msg.sender);\\n    }\\n\\n    function createProposal(\\n    string memory description,\\n    uint256 _insuranceType,\\n    uint256 _amountToBeSetteled) public  payable{\\n\\n        require(msg.value>=FEE,\\\"Not enough eth\\\");\\n       // require(token.balanceOf(msg.sender)>=100*10**18, \\\"Need at least 100 tokens to create a proposal\\\");\\n        proposalCount++;\\n        proposals[proposalCount] = Proposal({\\n            proposer:msg.sender,\\n            id: proposalCount,\\n            description: description,\\n            votesFor: 0,\\n            votesAgainst: 0,\\n            insuranceType: _insuranceType,\\n            executed: false,\\n            amountToBeSetteled: _amountToBeSetteled\\n        });\\n        emit ProposalCreated(proposalCount, description);\\n    }\\n\\n    function voteOnProposal(uint256 proposalId, bool voteFor, uint256 amount) public nonReentrant {\\n        require(proposals[proposalId].id == proposalId, \\\"Proposal does not exist\\\");\\n        require(!hasVoted[msg.sender][proposalId], \\\"Already voted\\\");  \\n        IERC20 token = IERC20(governanceToken);\\n        require(token.balanceOf(msg.sender)>=amount, \\\"Not enough tokens to vote\\\");\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"Token transfer failed\\\");\\n        if (voteFor) {\\n            proposals[proposalId].votesFor+= amount;\\n        } else {\\n            proposals[proposalId].votesAgainst+= amount;\\n        }\\n        hasVoted[msg.sender][proposalId] = true;\\n        uint256 votesRequiredToPass=4;\\n        emit Voted(proposalId, msg.sender, voteFor, amount);\\n    }\\n\\nfunction processPassedProposals(uint256 proposalId) public {\\n    require(proposals[proposalId].id == proposalId, \\\"Proposal does not exist\\\");\\n    \\n    uint256 totalVotes = proposals[proposalId].votesFor + proposals[proposalId].votesAgainst;\\n    require(totalVotes>=4, \\\"Not enough votes to process\\\");\\n\\n    if (proposals[proposalId].votesFor > proposals[proposalId].votesAgainst) {\\n        master.getProposalStateAfterRejection(true, proposals[proposalId].proposer, proposals[proposalId].amountToBeSetteled);\\n    } else {\\n        master.getProposalStateAfterRejection(false, proposals[proposalId].proposer, proposals[proposalId].amountToBeSetteled);\\n    }\\n}\\n     \\n}\\n\",\"keccak256\":\"0xa5dc168ae112d1bae3f38e8c5f17a70a4c05a5bb3b06245dea07956ca6ff0040\",\"license\":\"MIT\"},\"contracts/agroCoin.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AgroCoin is ERC20, Ownable {\\n    constructor(uint256 initialSupply) ERC20(\\\"AgroCoin\\\", \\\"$AGRO\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    function mint(address to, uint256 amount) public  {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3fb30f13c1ea4581e0c9e9ab40237c3d086d3e35d97e15a560d8e1eefa0ce689\",\"license\":\"MIT\"},\"contracts/master.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.8;\\ncontract masterContract{\\n\\n    mapping(address=>bool) public  NFT_yes_or_no;\\n    mapping (address =>uint) public  userInsurance;//stores userInsurance choice\\n    mapping(address=>uint256)  public NFTDetails;\\n    mapping(address=>bool)  public rejectedClaim;\\n\\n    mapping(address=>uint256) public rejectedValue; \\n    \\n    \\n    function putUserInfo(uint256 choice) public  {\\n     userInsurance[msg.sender]=choice;\\n    }\\n    function getUserInfo() public view returns (uint256){\\n      return userInsurance[msg.sender];\\n    }\\n    function setAddressHasNFT(address user) public {\\n      require(!NFT_yes_or_no[user],\\\"already has nft\\\");\\n        NFT_yes_or_no[user]=true;\\n    }\\n    function NFT_yes_or_noStatus(address user) public view returns (bool) {\\n    return NFT_yes_or_no[user];\\n    }\\n    function getProposalStateAfterRejection(bool _status,address user,uint256 _rejectedValue) public returns (bool ){\\n            //get From DAO.sol\\n         rejectedValue[user]=_rejectedValue;\\n         rejectedClaim[user]=_status;\\n    }\\n    function passProposalState(address user) public  view returns(bool answer){                    \\n    return rejectedClaim[user];    //to the isnuranceOne.sol\\n    }\\n    function passProposalValue(address user) public view returns(uint256){\\n      return rejectedValue[user];\\n    }\\n\\n}\",\"keccak256\":\"0x5286a6ca534376110407fdc73dbcfc422652ee219f0793e1ee0c1d1c52576670\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063d3506f3d11610064578063d3506f3d146101c8578063da35c664146101f1578063ee97f7f31461021c578063f63d13d714610247578063f96dae0a14610251578063fc0c546a1461027c576100a7565b8063013cf08b146100ac57806322e2e12d146100f05780633106fea01461010c57806342545825146101355780638da5cb5b14610172578063c57981b51461019d575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610f5a565b6102a7565b6040516100e7989796959493929190611082565b60405180910390f35b61010a6004803603810190610105919061123c565b6103a4565b005b34801561011857600080fd5b50610133600480360381019061012e91906112d7565b61055f565b005b34801561014157600080fd5b5061015c60048036038101906101579190611356565b61091e565b6040516101699190611396565b60405180910390f35b34801561017e57600080fd5b5061018761094d565b60405161019491906113b1565b60405180910390f35b3480156101a957600080fd5b506101b2610973565b6040516101bf91906113cc565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190610f5a565b610979565b005b3480156101fd57600080fd5b50610206610c6f565b60405161021391906113cc565b60405180910390f35b34801561022857600080fd5b50610231610c75565b60405161023e9190611446565b60405180910390f35b61024f610c9b565b005b34801561025d57600080fd5b50610266610e6d565b60405161027391906113b1565b60405180910390f35b34801561028857600080fd5b50610291610e91565b60405161029e9190611482565b60405180910390f35b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020180546102f6906114cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610322906114cc565b801561036f5780601f106103445761010080835404028352916020019161036f565b820191906000526020600020905b81548152906001019060200180831161035257829003601f168201915b5050505050908060030154908060040154908060050154908060060160009054906101000a900460ff16908060070154905088565b6003543410156103e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e090611549565b60405180910390fd5b600260008154809291906103fc90611598565b91905055506040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600254815260200184815260200160008152602001600081526020018381526020016000151581526020018281525060066000600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190816104d39190611782565b50606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e082015181600701559050507f9c770c289ab5bf7e57cb1d23c8ceae993aea46eb64847072fd3d78ca60d3e43260025484604051610552929190611854565b60405180910390a1505050565b610567610eb7565b826006600085815260200190815260200160002060010154146105bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b6906118d0565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff161561065d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106549061193c565b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050818173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106bc91906113b1565b602060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190611971565b101561073e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610735906119ea565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161077b93929190611a0a565b6020604051808303816000875af115801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190611a56565b6107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490611acf565b60405180910390fd5b821561083557816006600086815260200190815260200160002060030160008282546108299190611aef565b92505081905550610863565b8160066000868152602001908152602001600020600401600082825461085b9190611aef565b925050819055505b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600490507f7c2de587c00d75474a0c6c6fa96fd3b45dc974cd4e8a75f712bb84c950dce1b5853386866040516109079493929190611b23565b60405180910390a15050610919610f06565b505050565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b806006600083815260200190815260200160002060010154146109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c8906118d0565b60405180910390fd5b600060066000838152602001908152602001600020600401546006600084815260200190815260200160002060030154610a0b9190611aef565b90506004811015610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890611bb4565b60405180910390fd5b600660008381526020019081526020016000206004015460066000848152602001908152602001600020600301541115610b7a57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a694c98d60016006600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660066000878152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610b3193929190611bd4565b6020604051808303816000875af1158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b749190611a56565b50610c6b565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a694c98d60006006600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660066000878152602001908152602001600020600701546040518463ffffffff1660e01b8152600401610c2693929190611bd4565b6020604051808303816000875af1158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c699190611a56565b505b5050565b60025481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600354341015610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd790611c7d565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6490611ce9565b60405180910390fd5b6004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f70b6d027ae4d0cf7c852181925ea65e295b17bb27ad98c236d23b80fda726f1f60405160405180910390a2565b7f000000000000000000000000000000000000000000000000000000000000000081565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef390611d55565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f3781610f24565b8114610f4257600080fd5b50565b600081359050610f5481610f2e565b92915050565b600060208284031215610f7057610f6f610f1a565b5b6000610f7e84828501610f45565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fb282610f87565b9050919050565b610fc281610fa7565b82525050565b610fd181610f24565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611011578082015181840152602081019050610ff6565b60008484015250505050565b6000601f19601f8301169050919050565b600061103982610fd7565b6110438185610fe2565b9350611053818560208601610ff3565b61105c8161101d565b840191505092915050565b60008115159050919050565b61107c81611067565b82525050565b600061010082019050611098600083018b610fb9565b6110a5602083018a610fc8565b81810360408301526110b7818961102e565b90506110c66060830188610fc8565b6110d36080830187610fc8565b6110e060a0830186610fc8565b6110ed60c0830185611073565b6110fa60e0830184610fc8565b9998505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111498261101d565b810181811067ffffffffffffffff8211171561116857611167611111565b5b80604052505050565b600061117b610f10565b90506111878282611140565b919050565b600067ffffffffffffffff8211156111a7576111a6611111565b5b6111b08261101d565b9050602081019050919050565b82818337600083830152505050565b60006111df6111da8461118c565b611171565b9050828152602081018484840111156111fb576111fa61110c565b5b6112068482856111bd565b509392505050565b600082601f83011261122357611222611107565b5b81356112338482602086016111cc565b91505092915050565b60008060006060848603121561125557611254610f1a565b5b600084013567ffffffffffffffff81111561127357611272610f1f565b5b61127f8682870161120e565b935050602061129086828701610f45565b92505060406112a186828701610f45565b9150509250925092565b6112b481611067565b81146112bf57600080fd5b50565b6000813590506112d1816112ab565b92915050565b6000806000606084860312156112f0576112ef610f1a565b5b60006112fe86828701610f45565b935050602061130f868287016112c2565b925050604061132086828701610f45565b9150509250925092565b61133381610fa7565b811461133e57600080fd5b50565b6000813590506113508161132a565b92915050565b6000806040838503121561136d5761136c610f1a565b5b600061137b85828601611341565b925050602061138c85828601610f45565b9150509250929050565b60006020820190506113ab6000830184611073565b92915050565b60006020820190506113c66000830184610fb9565b92915050565b60006020820190506113e16000830184610fc8565b92915050565b6000819050919050565b600061140c61140761140284610f87565b6113e7565b610f87565b9050919050565b600061141e826113f1565b9050919050565b600061143082611413565b9050919050565b61144081611425565b82525050565b600060208201905061145b6000830184611437565b92915050565b600061146c82611413565b9050919050565b61147c81611461565b82525050565b60006020820190506114976000830184611473565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114e457607f821691505b6020821081036114f7576114f661149d565b5b50919050565b7f4e6f7420656e6f75676820657468000000000000000000000000000000000000600082015250565b6000611533600e83610fe2565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115a382610f24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036115d5576115d4611569565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611605565b61164c8683611605565b95508019841693508086168417925050509392505050565b600061167f61167a61167584610f24565b6113e7565b610f24565b9050919050565b6000819050919050565b61169983611664565b6116ad6116a582611686565b848454611612565b825550505050565b600090565b6116c26116b5565b6116cd818484611690565b505050565b5b818110156116f1576116e66000826116ba565b6001810190506116d3565b5050565b601f82111561173657611707816115e0565b611710846115f5565b8101602085101561171f578190505b61173361172b856115f5565b8301826116d2565b50505b505050565b600082821c905092915050565b60006117596000198460080261173b565b1980831691505092915050565b60006117728383611748565b9150826002028217905092915050565b61178b82610fd7565b67ffffffffffffffff8111156117a4576117a3611111565b5b6117ae82546114cc565b6117b98282856116f5565b600060209050601f8311600181146117ec57600084156117da578287015190505b6117e48582611766565b86555061184c565b601f1984166117fa866115e0565b60005b82811015611822578489015182556001820191506020850194506020810190506117fd565b8683101561183f578489015161183b601f891682611748565b8355505b6001600288020188555050505b505050505050565b60006040820190506118696000830185610fc8565b818103602083015261187b818461102e565b90509392505050565b7f50726f706f73616c20646f6573206e6f74206578697374000000000000000000600082015250565b60006118ba601783610fe2565b91506118c582611884565b602082019050919050565b600060208201905081810360008301526118e9816118ad565b9050919050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b6000611926600d83610fe2565b9150611931826118f0565b602082019050919050565b6000602082019050818103600083015261195581611919565b9050919050565b60008151905061196b81610f2e565b92915050565b60006020828403121561198757611986610f1a565b5b60006119958482850161195c565b91505092915050565b7f4e6f7420656e6f75676820746f6b656e7320746f20766f746500000000000000600082015250565b60006119d4601983610fe2565b91506119df8261199e565b602082019050919050565b60006020820190508181036000830152611a03816119c7565b9050919050565b6000606082019050611a1f6000830186610fb9565b611a2c6020830185610fb9565b611a396040830184610fc8565b949350505050565b600081519050611a50816112ab565b92915050565b600060208284031215611a6c57611a6b610f1a565b5b6000611a7a84828501611a41565b91505092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000611ab9601583610fe2565b9150611ac482611a83565b602082019050919050565b60006020820190508181036000830152611ae881611aac565b9050919050565b6000611afa82610f24565b9150611b0583610f24565b9250828201905080821115611b1d57611b1c611569565b5b92915050565b6000608082019050611b386000830187610fc8565b611b456020830186610fb9565b611b526040830185611073565b611b5f6060830184610fc8565b95945050505050565b7f4e6f7420656e6f75676820766f74657320746f2070726f636573730000000000600082015250565b6000611b9e601b83610fe2565b9150611ba982611b68565b602082019050919050565b60006020820190508181036000830152611bcd81611b91565b9050919050565b6000606082019050611be96000830186611073565b611bf66020830185610fb9565b611c036040830184610fc8565b949350505050565b7f4469646e742073656e6420656e6f7567682066656520746f206a6f696e20444160008201527f4f00000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c67602183610fe2565b9150611c7282611c0b565b604082019050919050565b60006020820190508181036000830152611c9681611c5a565b9050919050565b7f616c726561647920612044414f206d656d626572000000000000000000000000600082015250565b6000611cd3601483610fe2565b9150611cde82611c9d565b602082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611d3f601f83610fe2565b9150611d4a82611d09565b602082019050919050565b60006020820190508181036000830152611d6e81611d32565b905091905056fea2646970667358221220ad4fe58373375bde503292b72ad6c59e17f0b302cf41cc7853ec0b50ff8faa2764736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 901,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 903,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "proposalCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 905,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "FEE",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 925,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "DAO_Members",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 929,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "isDAOMember",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 934,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "proposals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Proposal)922_storage)"
      },
      {
        "astId": 940,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "hasVoted",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 981,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "master",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(masterContract)2231"
      },
      {
        "astId": 984,
        "contract": "contracts/DAO.sol:InsuranceDAO",
        "label": "token",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AgroCoin)1315"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AgroCoin)1315": {
        "encoding": "inplace",
        "label": "contract AgroCoin",
        "numberOfBytes": "20"
      },
      "t_contract(masterContract)2231": {
        "encoding": "inplace",
        "label": "contract masterContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)922_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InsuranceDAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)922_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)922_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceDAO.Proposal",
        "members": [
          {
            "astId": 907,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "proposer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 909,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 911,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 913,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "votesFor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 915,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "votesAgainst",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 917,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "insuranceType",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 919,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "executed",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 921,
            "contract": "contracts/DAO.sol:InsuranceDAO",
            "label": "amountToBeSetteled",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}